# author: christian.gosslar@thalesgroup.com
# responsible: christian.gosslar@thalesgroup.com
# location: Berlin
# LM0003750 - LM0003750 - LM0003750 - LM0007733 - LM0007733
# TC0093049.001
'''
This procedure provides the possibility of basic tests for the exec commands at^sbnw and at^sbnr related to EFS Items.
The procedure works without additional tools.
The File hello_world.txt will write into the EFS.
Then this File will read by using at^sbnr.
Then a loop of 10 time the same file will be write/read/delete
Then this File will write again with an bigger Content.
module will be restart
Then this File will read again.
Then this File will be deleted.
Restart is done between write and read
'''


import unicorn
import dstl.auxiliary.devboard
import re

from core.basetest import BaseTest
from dstl.auxiliary.init import dstl_detect
from dstl.identification.collect_module_infos import dstl_collect_module_info
from dstl.identification.get_revision_number import dstl_get_revision_number
from dstl.identification.get_imei import dstl_get_imei
from dstl.identification.get_identification import dstl_get_bootloader
from dstl.identification.check_c_revision_number import dstl_check_c_revision_number
from dstl.auxiliary.restart_module import dstl_restart

testcase_id = "LM0003750 - LM0003750 - LM0003750 - LM0007733 - LM0007733"
filename_short_file = "hello_world.txt"
filename_big_file = "hello_world100.txt"
ver = "1.1"

class at_sbnw_sbnr_efs_basic(BaseTest):

    def remove_old_files(test, old_file_name):
        if (test.dut.project == 'VIPER'):
            test.log.info("Viper can't delete efs files - see IPIS100340251 - IPIS100340243 - ")
        else:
            test.log.info ("If a File >" + str(old_file_name) + "<  is available inside the Module?")
            test.log.info ("         (It schould not be.) ")
            test.expect(test.dut.at1.send_and_verify("at^sbnr=\"EFS\",\"" + str(old_file_name) + "\"","O")) # CME ERROR: parameters error
            # CME ERROR: 22 means: "not found"
            res = test.dut.at1.last_response
            if (not ("ERROR" in res)) and  (old_file_name in res):
                test.log.info("File >" + str(old_file_name) + "< is there, it must removed")
                test.expect(test.dut.at1.send_and_verify("at^sbnw=\"EFS\",\"" + str(old_file_name) + "\",-1", ))
                test.remove_old_files(old_file_name)
            else:
                test.log.info("File >" + str(old_file_name) + "< is NOT there - nothing to do, OK")
        return

    def setup(test):
        test.log.com ('***** Testcase: ' + test.test_file + '*****')
        test.log.com ('***** Ver: ' + str(ver) + ' - Start *****')
        test.log.com ("***** " + testcase_id + " *****")
        test.dut.dstl_detect()
        test.dut.dstl_get_imei()
        test.dut.dstl_switch_off_at_echo(serial_ifc=0)
        test.dut.dstl_get_bootloader()
        test.dut.dstl_check_c_revision_number()
        test.dut.dstl_collect_module_info()
        test.dut.dstl_collect_module_info_for_mail()

    def run(test):
        '''
        This procedure provides the possibility of basic tests for the exec commands at^sbnw and at^sbnr related to EFS Items.
        The procedure works without additional tools.
        The File hello_world.txt will write into the EFS.
        Then this File will read by using at^sbnr.
        Then a loop of 10 time the same file will be write/read/delete
        Then this File will write again with an bigger Content.
        module will be restart
        Then this File will read again.
        Then this File will be deleted.
        Restart is done between write and read
        '''

        test.log.step ('Step 0.1: Prepare test')
        #==============================================================
        sbnw_test_resp = ".*\\^SBNW: \\(omadm\\), \\(\\)"
        sbnr_error_code = "100"
        write_hello_world_1 = ""
        write_hello_world_100_part_1 = ""
        write_hello_world_100_part_2 = ""

        write_hello_world_100_padd = "58319237E1DCDC8C"  # This is Padding during Write

        if (test.dut.project == 'BOBCAT'):
            write_hello_world_1 = "200000005A77616849D1757A68036CF2F93DD449868E31479EDD79AF1D761B543D8D5443"
            write_hello_world_100_part
            write_hello_world_100_part_2 = "C663C9631981A1EF29FAEB7D97DD247E7A01F55C3AB11F441190945D5E1A61C74B638709E85EFF3E3275AD5D89C227BDDB9C4B900DDAEBAABD73748D290FF4705C1EFB07A3666F6B941A6C4369EEE15C68036CF2F93DD44993869D4B9A391ED12D1ECE5AEE81C4C4469B3AB4B081742FB49A3A2B2F84040F42C82CAC1E7F10DA"
            write_hello_world_100_padd	= "58319237E1DCDC8C" # This is Padding during Write
            # read_hello_world_100_padd_1	= "0FA9971E7C9D0658"  # This is Padding during Read #
            # read_hello_world_100_padd_1 = "9EF6951E926C60F6" # BC25337CAF07BFF2
            # read_hello_world_100_padd_2	= "9AA4B373B0411B80"  #  This is Padding during Read
            sbnw_test_resp = ".*\\^SBNW: \\(agps, is_cert\\), \\(\\)";
            if "2" in test.dut.step:
                sbnw_test_resp = ".*\\^SBNW: \\(\"agps\", \"ciphersuites\", \"is_cert\", \"omadm\", \"sound\"\\),\\(1\\)";
            if "133" in test.dut.step:
                sbnw_test_resp = ".*\\^SBNW: \\(\"agps\", \"is_cert\", \"sound\"\\),\\(\\)";
            read_hello_world_1 = write_hello_world_1

        if (test.dut.project == 'VIPER'):
            # viper have a changed mefs tool,
            write_hello_world_1 = "200000006E431E8936D28AA2E4E8437D55C6448A561E0D26BF9290DF2042DE38A97DDAC0"
            write_hello_world_100_part
            write_hello_world_100_padd	= "FDE156EF94E6CE2C" # This is Padding during Write

            # new decoding since sw100_092
            read_hello_world_1 = "4800000005AFA6FF1BFE2DFBB9219EB4B63B070B970465A34BBC0DD3DF8D8437A3D26BE1DF8D8437A3D26BE1F9403AEFF4B2AEDEA42A38A5AD7E2EC1F651B7E782FE3FB3"
            read_hello_world
            write_hello_world_100_part_2 = ""
            # list only the official parameter, the internal are not listet
            sbnw_test_resp = ".*\\^SBNW: \\(\"agps\",\"ciphersuites\",\"is_cert\",\"management_cert\"\\),\\(1\\)"

        write_hello_world_100			= write_hello_world_100_part_1 + write_hello_world_100_part_2 + write_hello_world_100_padd
        #  The next Strings are Response-Strings
        if (test.dut.project == 'VIPER'):
            read_hello_world_100 = "^SBNR:" + read_hello_world_100
        else:
            read_hello_world_100 = "^SBNR:" + write_hello_world_100_part_1 + write_hello_world_100_part_2

        test.log.step ('Step 1.0: check commando functions')
        #==============================================================
        test.expect(test.dut.at1.send_and_verify("at+cmee=1"))
        test.expect(test.dut.at1.send_and_verify("at^sbnw=?", sbnw_test_resp ))

        test.expect(test.dut.at1.send_and_verify("at^sbnw?", "CME ERROR: 100")) # CME ERROR: unknown
        test.expect(test.dut.at1.send_and_verify("at^sbnw", "CME ERROR: 100")) # CME ERROR: unknown

        test.expect(test.dut.at1.send_and_verify("at^sbnr=?", "OK"))
        test.expect(test.dut.at1.send_and_verify("at^sbnr?", "OK"))

        if((test.dut.project == 'BOBCAT') or (test.dut.project == 'VIPER') ):
            test.expect(test.dut.at1.send_and_verify("at^sbnr?", "OK"))  # ok
        else:
            test.expect(test.dut.at1.send_and_verify("at^sbnr?", "CME ERROR: " + str(sbnr_error_code)))  # ok

        test.remove_old_files(filename_short_file)
        test.remove_old_files(filename_big_file)
        test.sleep(5)

        test.log.step ('Step 2.0: Write the short file >' + str(filename_short_file) +
                       '< with the content:\nHello World\nHallo Welt')
        #==============================================================

        test.expect(test.dut.at1.send_and_verify("at^sbnw=\"EFS\",\"" + str(filename_short_file) + "\",2",
                                expect="CONNECT.*EFS READY: SEND FILE", wait_for="CONNECT.*EFS READY: SEND FILE", timeout=60))
        test.expect(test.dut.at1.send_and_verify(str(write_hello_world_1), expect="EFS: END OK", wait_for="EFS: END OK", timeout=60))
        test.sleep(10)

        test.log.step ('Step 3.0: Read and compare the short file >' + str(filename_short_file) +
                       '< with the expected content:\nHello World\nHallo Welt')
        #==============================================================

        test.expect(test.dut.at1.send_and_verify("at^sbnr=\"EFS\",\"" + str(filename_short_file) +
                                                 "\"","SBNR:"+ str(read_hello_world_1) +".*OK"))

        test.log.step('Step 4.0: attempt to rewrite the files 10 times the short file >' + str(
            filename_short_file) + '< with the espected content:\nHello World\nHallo Welt')
        # ==============================================================

        for i in range(1, 11):
            test.log.info ("Loop: " + str(i))
            test.log.info ("===========================")
            test.expect(test.dut.at1.send_and_verify("at^sbnw=\"EFS\",\"" + str(filename_short_file) +
                                                     "\",2", expect="CONNECT.*EFS READY: SEND FILE", wait_for="CONNECT.*EFS READY: SEND FILE", timeout=60))
            test.expect(test.dut.at1.send_and_verify(str(write_hello_world_1),expect="EFS: END OK", wait_for="EFS: END OK", timeout=60))
            test.expect(test.dut.at1.send_and_verify("at^sbnr=\"EFS\",\"" +
                                                     str(filename_short_file) +  "\"","SBNR:" + str(read_hello_world_1) + ".*OK"))
            test.sleep(1)
            test.remove_old_files(filename_short_file)
            test.sleep(1)

        test.expect(test.dut.at1.send_and_verify("at^sbnw=\"EFS\",\"" + str(filename_short_file) +
                                                 "\",2", expect="CONNECT.*EFS READY: SEND FILE", wait_for="CONNECT.*EFS READY: SEND FILE" , timeout=60))
        test.expect(test.dut.at1.send_and_verify(str(write_hello_world_1),expect="EFS: END OK", wait_for="EFS: END OK", timeout=60))
        test.sleep(5)

        test.log.step ('Step 5.0: Restart the file and read the test file again')
        #==============================================================
        test.expect(test.dut.dstl_restart())
        test.expect(test.dut.at1.send_and_verify("at^sbnr=\"EFS\",\"" + str(filename_short_file) + "\"",
                                                 str(read_hello_world_1) + ".*OK"))

        test.log.step ('Step 6.0: Write the big file >' + str(filename_big_file) +
                       '< with the content:\nHello World\nHallo Welt (50 times)')
        #==============================================================
        test.expect(test.dut.at1.send_and_verify("at^sbnw=\"EFS\",\"" + str(filename_big_file) +
                                                 "\",2", expect="CONNECT.*EFS READY: SEND FILE", wait_for="CONNECT.*EFS READY: SEND FILE", timeout=120))
        test.expect(test.dut.at1.send_and_verify(str(write_hello_world_100),expect="EFS: END OK", wait_for="EFS: END OK", timeout=120))

        test.log.step ('Step 7.0: Read the big file >' + str(filename_big_file) +
                       '< with the expected content:\nHello World\nHallo Welt (50 times)')
        #==============================================================

        test.expect(test.dut.at1.send_and_verify("at^sbnr=\"EFS\",\"" + str(filename_big_file) + "\"",
                                                  str(read_hello_world_100) ))

        test.log.step ('Step 8.0: Restart the file and read the test file again')
        #==============================================================
        test.expect(test.dut.dstl_restart())
        test.expect(test.dut.at1.send_and_verify("at^sbnr=\"EFS\",\"" + str(filename_big_file) + "\"",
                                                  str(read_hello_world_100) ))

        test.log.step ('Step 9.0: Rewrite the same big File again')
        #==============================================================
        test.expect(test.dut.at1.send_and_verify("at^sbnw=\"EFS\",\"" + str(filename_big_file) +
                                                 "\",2", expect="CONNECT.*EFS READY: SEND FILE", wait_for="CONNECT.*EFS READY: SEND FILE", timeout=120))
        test.expect(test.dut.at1.send_and_verify(str(write_hello_world_100),expect="EFS: END OK", wait_for="EFS: END OK", timeout=120))
        test.sleep(1)

        test.log.step ('Step 10.0: Read the big file >' + str(filename_big_file) +
                       '< with the expected content:\nHello World\nHallo Welt (50 times)')
        #==============================================================
        test.expect(test.dut.at1.send_and_verify("at^sbnr=\"EFS\",\"" + str(filename_big_file) + "\"",
                                                  str(read_hello_world_100) ))

        test.log.step ('Step x.0: End')
        #==============================================================

    def cleanup(test):
        """Cleanup method.
        Steps to be executed after test run steps.
        """
        test.log.com(' ')
        test.log.com('****  log dir: ' + test.workspace + ' ****')

        test.remove_old_files(filename_short_file)
        test.remove_old_files(filename_big_file)

        test.log.com(' ')
        test.log.com('**** Testcase: ' + test.test_file + ' - END ****')

if "__main__" == __name__:
    unicorn.main()
