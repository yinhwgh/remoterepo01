#author: haofeng.ding@thalesgroup.com
#location: Dalian
#TC0088273.001
#Debug base project: Serval

import unicorn
from core.basetest import BaseTest
from dstl.miscellaneous import access_ffs_by_at_command
from dstl.auxiliary import init
from dstl.auxiliary import restart_module
from dstl.auxiliary.generate_data import dstl_generate_data
from dstl.miscellaneous import ffs_properties
import random

class Test(BaseTest):
    '''
        TC0088273.001 - TpCustomerFlashStorage
        This procedure provides the possibility of basic tests for the Customer Flash Storage.
        It checks the AT-Sub-Commands and functionality to write, read and erase the customer flash.
        Subscriber: 2
    '''
    rootpath = 'A:/'
    open_flag = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15']
    open_flag_new = ['17','18','19']
    open_close_flag = ['20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','99','100']
    close_flag = ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24']
    close_error_flag = ['55','65535','65536','24','-8']
    flag = ['1','2','4','8','16','32']
    write_length_list = ['9999999999','0','9999999999','52']
    write_maxlength = 1500
    write_data = '!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rf'
    open_test = []
    different_flag_list = ['16','20','24']
    length_list = [123,124,125,126,127,128]
    dir_list = ['abcxyz_ABCXYZ_0123456789/','ABCXYZ_abcxyz_0123456789/']
    file_list = ['fileONE.bin','FILEone.bin']
    normal_result = '.*OK.*|.*ERROR.*'
    read_text = 'Step 4.5 Read a File: Hello World'
    random_character_set = '!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|'
    max_path = rootpath + 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    read_flag = ['0','1','2','3','15','20','1500']
    write_read_file_list = ['Read45.txt','Read45_empty_File.txt']
    rm_list = ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43']
    seek_flag = ['-2147483648','2147483647','-2147483647','2147483646','-1147483647','1147483648','-999999999','999999999','-2147483649','2147483648','-9999999999','9999999999']
    stata_file_list = ['TestSeekEmpty.bin', 'CrcDemoFile.txt', 'TestCrc1Empty.bin', 'TestCrc2Empty.bin', 'copydir/', 'Test-Crc-of-15000-Bytes.bin', 'dircopy/', 'TestDestination.bin']
    def setup(test):
        test.dut.dstl_detect()
        test.log.info('Enable error result code with verbose (string) values.')
        test.expect(test.dut.at1.send_and_verify('at+cmee=2', expect='OK'))
        # clear module FFS
        test.dut.dstl_clear_directory(test.rootpath)
    def run(test):
        max_path_length = test.dut.dstl_get_ffs_max_dir_lenth()
        test.log.info('1.1 check AT-Command')
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=ls,a:/', expect='.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=gstat,A:/', expect='.*\^SFSA: .*\^SFSA:.*\^SFSA: 0.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=ls,A:/', expect='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT+CMEE=2', expect='.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT&W', expect='.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('AT+CMEE=1', expect='.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT&W', expect='.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=?', expect='.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=?', expect='.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA?', expect='.*\+CME ERROR: 100'))
        test.expect(test.dut.at1.send_and_verify('AT^sfsa?', expect='.*\+CME ERROR: unknown'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA', expect='.*\+CME ERROR: 100'))
        test.expect(test.dut.at1.send_and_verify('AT^sfsa', expect='.*\+CME ERROR: unknown'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA="hallo"', expect='.*\^SFSA: 201.*\+CME ERROR: 21\s+|.*\+CME ERROR: 25'))
        test.expect(test.dut.at1.send_and_verify('AT^sfsa=duda', expect='.*\^SFSA: 201.*\+CME ERROR: invalid index\s+|.*\+CME ERROR: invalid characters in text string'))
        test.log.info('2.1 cmd OPEN')
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=open', expect = test.normal_result))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=open,"A:/"', expect= test.normal_result))
        test.expect(test.dut.dstl_open_file(test.rootpath, 0, expect_response=test.normal_result))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'duda/text.txt', 2, expect_response='.*\^SFSA: 101.*ERROR.*\s+|.*\^SFSA: 2.*ERROR.*'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'text.txt', 2, expect_response='.*\^SFSA: 2.*ERROR.*'))
        for i in test.length_list:
            test.expect(test.dut.dstl_open_file(test.max_path[:i], 2, expect_response=test.normal_result))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'test01.txt', 12, expect_response='.*\^SFSA: .*0.*OK'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'test01.txt', 19, expect_response='.*\^SFSA: 2.*ERROR.*'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'test01.txt', 19, expect_response='.*\^SFSA: 30.*ERROR.*'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'texter', 32, expect_response=test.normal_result))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'texter', 99, expect_response=test.normal_result))
        test.log.info('2.2 cmd OPEN as CREATE')
        for i in test.length_list:
            if i == 123:
                test.expect(test.dut.dstl_open_file(test.max_path[:i], 9, expect_response='.*\^SFSA: .*,0.*OK.*'))
                test.expect(test.dut.dstl_close_file(0))
            else:
                test.expect(test.dut.dstl_open_file(test.max_path[:i], 9, expect_response=test.normal_result))
        test.log.info('2.3 cmd CLOSE')
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=close', expect=test.normal_result))
        for i in test.length_list:
            if i == '1':
                test.expect(test.dut.dstl_open_file(test.rootpath + 'ValidFileHandle.txt', 8, expect_response='.*\^SFSA: .*,0.*OK.*'))
                test.expect(test.dut.dstl_close_file(i))
                test.expect(test.dut.dstl_close_file(i, expect_response='.*\^SFSA: 9.*ERROR.*'))
            else:
                test.expect(test.dut.dstl_close_file(i, expect_response='.*\^SFSA: 204.*\+CME ERROR: 765\s+|.*\^SFSA: 9.*ERROR.*|.*\+CME ERROR: 21'))
        test.expect(test.dut.at1.send_and_verify('at+ipr?', expect='.*OK.*'))
        test.expect(test.dut.dstl_restart())
        test.expect(test.dut.at1.send_and_verify('ati', expect=test.normal_result))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_remove_file(test.rootpath + 'JRC-1.60.10.jar', expect_response=test.normal_result))
        test.expect(test.dut.dstl_remove_file(test.rootpath + 'JRC-1.60.10.jad', expect_response=test.normal_result))
        test.expect(test.dut.dstl_remove_file(test.rootpath + 'lmstores/', expect_response=test.normal_result))
        test.expect(test.dut.dstl_remove_directory(test.rootpath + 'lmstores/', expect_response=test.normal_result))
        test.expect(test.dut.dstl_remove_file(test.rootpath + 'test01.txt', expect_response=test.normal_result))
        test.expect(test.dut.dstl_remove_file(test.max_path[:124], expect_response=test.normal_result))
        test.expect(test.dut.dstl_remove_file(test.rootpath + 'ValidFileHandle.txt', expect_response=test.normal_result))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.at1.send_and_verify('at^SFSA=LS,A:/', expect=test.normal_result))
        test.log.info('2.4 cmd GSTAT')
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=gstat,"A:/"', expect='.*\^SFSA: .*\^SFSA: .*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=gstat', expect='.*OK.*|.*ERROR.*'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=gstat,"B:/"', expect=test.normal_result))
        test.expect(test.dut.at1.send_and_verify('AT^sfsa=gstat,"B:/"', expect=test.normal_result))
        test.log.info('3.1 create a lot of file handles')
        for i in test.close_flag:
            if i == 24:
                test.expect(test.dut.dstl_open_file(test.rootpath + 'file' + i, 8, expect_response='.*\^SFSA: ' + i + '.*ERROR.*'))
            else:
                test.expect(test.dut.dstl_open_file(test.rootpath + 'file' + i, 8, expect_response='.*\^SFSA: ' + i + ',0.*OK'))
        for i in test.close_flag:
            if i == 24:
                test.expect(test.dut.dstl_close_file(i, expect_response=test.normal_result))
            else:
                test.expect(test.dut.dstl_close_file(i, expect_response='.*\^SFSA: 0.*OK'))
        test.log.info('3.2.1 create folder with character set check')
        test.expect(test.dut.dstl_create_directory(test.rootpath + test.dir_list[0], expect_response='.*\^SFSA: .*OK.*'))
        test.log.info('3.2.2 create files with character set check')
        test.expect(test.dut.dstl_open_file(test.rootpath + test.dir_list[0] + test.file_list[0], 9, expect_response=test.normal_result))
        test.expect(test.dut.dstl_open_file(test.rootpath + test.dir_list[1] + test.file_list[1], 9, expect_response=test.normal_result))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,' + test.rootpath , expect='.*\^SFSA: "' + test.dir_list[0] + '".*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,' + test.rootpath + test.dir_list[0], expect=test.normal_result))
        test.log.info('3.3 rename a file')
        test.expect(test.dut.dstl_rename_file(test.rootpath + test.dir_list[0] + test.file_list[1],test.rootpath + test.dir_list[0] + test.file_list[0], expect_response=test.normal_result))
        test.expect(test.dut.dstl_rename_file(test.rootpath + test.dir_list[0] + test.file_list[1],test.file_list[0], expect_response=test.normal_result))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,' + test.rootpath , expect='.*\^SFSA: "' + test.dir_list[0] + '".*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,'+ test.rootpath + test.dir_list[0], expect='.*\^SFSA: "' + test.file_list[0] + '".*\^SFSA: 0.*OK.*'))
        test.log.info('3.4 rename folders')
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/ABCXYZ_abcxyz_0123456789', expect='.*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.dstl_create_directory(test.rootpath + test.dir_list[1], expect_response=test.normal_result))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/', expect='.*\^SFSA: "abcxyz_ABCXYZ_0123456789/".*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/abcxyz_ABCXYZ_0123456789', expect='.*\^SFSA: "fileONE.bin".*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.dstl_create_directory(test.rootpath + test.dir_list[0], expect_response=test.normal_result))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/', expect='.*\^SFSA: "abcxyz_ABCXYZ_0123456789/".*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/abcxyz_ABCXYZ_0123456789', expect='.*\^SFSA: "fileONE.bin".*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.dstl_create_directory(test.rootpath + test.dir_list[0] + '.*#@', expect_response=test.normal_result))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/', expect='.*\^SFSA: "abcxyz_ABCXYZ_0123456789/".*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.dstl_create_directory(test.rootpath + test.dir_list[0] + '.*#@', expect_response='.*\^SFSA: .*ERROR.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/', expect='.*\^SFSA: "abcxyz_ABCXYZ_0123456789/".*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.dstl_create_directory(test.rootpath + test.dir_list[0], expect_response='.*ERROR.*'))
        test.expect(test.dut.dstl_create_directory(test.rootpath + test.dir_list[0], expect_response=test.normal_result))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_list_directory(test.rootpath + test.dir_list[0]))
        test.expect(test.dut.dstl_list_directory('"' + test.rootpath + test.dir_list[0] + '"'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/abcxyz_ABCXYZ_0123456789,', expect='.*OK.*|.*ERROR.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,"A:/abcxyz_ABCXYZ_0123456789,"', expect='.*OK.*|.*ERROR.*'))
        test.expect(test.dut.dstl_create_directory(test.rootpath + test.dir_list[0], expect_response=test.normal_result))
        test.expect(test.dut.dstl_create_directory('"' + test.rootpath + test.dir_list[0] + '"', expect_response=test.normal_result))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_create_directory(test.rootpath + 'rendir344', expect_response='.*\^SFSA: .*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/', expect='.*\^SFSA: "rendir344/".*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.dstl_rename_file(test.rootpath + 'rendir344', test.rootpath + 'renamedDir', expect_response='.*\^SFSA: 102.*\+CME ERROR: 100.*'))
        test.expect(test.dut.dstl_rename_file(test.rootpath + 'rendir344', 'renamedDir',expect_response='.*\^SFSA: .*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/', expect='.*\^SFSA: "renamedDir/".*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.dstl_rename_file(test.rootpath + 'renamedDir', 'renamed2dir', expect_response='.*\^SFSA: .*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/', expect='.*\^SFSA: "renamed2dir/".*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/renamed2dir', expect='.*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.dstl_remove_file(test.rootpath + 'renamed2dir/fileONE.bin', expect_response='.*\^SFSA: 2.*ERROR.*'))
        test.expect(test.dut.dstl_create_directory('renamed2dir/', expect_response='.*\^SFSA: .*ERROR.*'))
        test.expect(test.dut.dstl_create_directory(test.rootpath + 'renamed2dir/', expect_response='.*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.log.info('3.5.1 create recursive directories')
        test.expect(test.dut.at1.send_and_verify('at+ipr?', expect='.*OK.*'))
        test.expect(test.dut.dstl_restart())
        test.expect(test.dut.at1.send_and_verify('AT+CMEE=1', expect='.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('ati', expect='.*ERROR.*|.*OK.*'))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        for i in test.close_flag:
            test.expect(test.dut.dstl_remove_file(test.rootpath + 'file' + i, expect_response=test.normal_result))
        test.expect(test.dut.dstl_remove_file(test.rootpath + test.dir_list[0], expect_response=test.normal_result))
        test.expect(test.dut.dstl_remove_directory(test.rootpath + test.dir_list[0], expect_response=test.normal_result))
        test.expect(test.dut.at1.send_and_verify('ati', expect='.*ERROR.*|.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^SFSA=LS,A:/abcxyz_ABCXYZ_0123456789/', expect='.*ERROR.*|.*OK.*'))
        test.expect(test.dut.dstl_remove_file(test.rootpath + test.dir_list[0] + test.file_list[0], expect_response=test.normal_result))
        test.expect(test.dut.dstl_list_directory(test.rootpath + test.dir_list[0]))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_remove_directory(test.rootpath + test.dir_list[0], expect_response=test.normal_result))
        temp_dir = test.rootpath
        for i in range(0,46):
            temp_dir = temp_dir + str(i)
            test.expect(test.dut.dstl_create_directory(temp_dir, expect_response='.*\^SFSA: 0.*OK\s+|.*\^SFSA: 104.*'))
            temp_dir = temp_dir + '/'
        test.log.info('4.1.1 write to file with different parameters')
        test.expect(test.dut.at1.send_and_verify('AT+CCLK?', expect='.*".*".*OK'))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TestWriteFile41.bin'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestWriteFile41.bin', 9))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TestWriteFile41.bin'))
        for i in test.write_length_list:
            if i == '52':
                data = random.sample(test.random_character_set, 50)
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=write,0,'+i, expect='.*CONNECT.*'))
                #test.dut.dstl_write_file(0, i, '', expect_response='.*CONNECT.*')
                test.expect(test.dut.at1.send('!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!'))
                #test.dut.at1.send(data)
                result = test.dut.at1.wait_for('.*\^SFSA: 214.*ERROR.*|.*ERROR: 21.*')
                if result:
                    test.log.info('214: data transfer error: timeout expired')
                else:
                    test.log.info('Timeout is not 30 seconds!", "DIF"')
                    test.expect(test.dut.at1.send('!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!'))
                    #test.dut.at1.send(data)
            else:
                test.expect(test.dut.dstl_write_file(0, i, '', expect_response='.*\^SFSA: 214.*ERROR.*|.*ERROR: 21.*'))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TestWriteFile41.bin'))
        test.expect(test.dut.dstl_write_file(0, test.write_maxlength, test.write_data , expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestWriteFile41.bin', expect='.*\^SFSA: 1500.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.log.info('4.1.2 write again 1 byte')
        data = random.choice(test.random_character_set)
        test.expect(test.dut.dstl_write_file(0, 1, data, expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestWriteFile41.bin', expect='.*\^SFSA: 1501.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_close_file(0))
        test.log.info('4.1.3 try to write to a file which is READ_ONLY')
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestWriteFile41.bin', 0, expect_response=test.normal_result))
        test.expect(test.dut.dstl_write_file(-1, 1, '', expect_response='.*\^SFSA:'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestWriteFile41.bin', expect='.*\^SFSA: 1501.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_close_file(-1))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestWriteFile41.bin', expect='.*\^SFSA: 1501.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT+CCLK?', expect='.*".*".*OK'))
        test.log.info('4.2 write full available space to one file')
        test.expect(test.dut.dstl_open_file(test.rootpath + 'FullWriteFile42.bin', 9, expect_response=test.normal_result))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'FullWriteFile42.bin'))
        test.expect(test.dut.dstl_read_global_status())
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.at1.send_and_verify('at+ipr?', expect='.*OK.*'))
        test.expect(test.dut.dstl_restart())
        test.expect(test.dut.at1.send_and_verify('AT+CMEE=1', expect='.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT+CMEE=2', expect='.*OK'))
        test.log.info('4.3.1. first prepare a file to truncate')
        test.expect(test.dut.at1.send_and_verify('AT+CCLK?', expect='.*".*".*OK'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TruncateFile43.bin', 9, expect_response=test.normal_result))
        test.expect(test.dut.dstl_write_file(0, test.write_maxlength, test.write_data , expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TruncateFile43.bin', expect='.*\^SFSA: 1500.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.log.info('4.3.2. check different flag combinations')
        for i in test.different_flag_list:
            test.expect(test.dut.dstl_open_file(test.rootpath + 'TruncateFile43.bin', i, expect_response=test.normal_result))
            test.expect(test.dut.dstl_close_file(0))
            test.expect(test.dut.dstl_read_status(test.rootpath + 'TruncateFile43.bin'))
        test.log.info('4.3.3. truncate it')
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TruncateFile43.bin', 18, expect_response=test.normal_result))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TruncateFile43.bin', 17, expect_response=test.normal_result))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TruncateFile43.bin'))
        test.expect(test.dut.dstl_read_global_status())
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TruncateFile43.bin'))
        test.expect(test.dut.dstl_read_global_status())
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.log.info('4.3.4 create crc for truncated file (should be zero)')
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'TruncateFile43.bin'))
        test.log.info('4.4.1 do not send a byte - check for timeout')
        test.expect(test.dut.dstl_open_file(test.rootpath + 'timeouttest.txt', 10, expect_response=test.normal_result))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=write,0,1', expect='.*CONNECT.*'))
        #test.dut.dstl_write_file(0, 1, "", expect_response='.*CONNECT.*')
        test.expect(test.dut.at1.wait_for('.*\^SFSA: 214.*ERROR.*|.*ERROR: 21.*'))
        test.log.info('4.4.2 send one byte only - check for timeout')
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=write,0,1500', expect='.*CONNECT.*'))
        #test.dut.dstl_write_file(0, test.write_maxlength, "", expect_response='.*CONNECT.*')
        test.expect(test.dut.at1.wait_for('.*\^SFSA: 214.*ERROR.*|.*ERROR: 21.*'))
        test.log.info('4.4.3 send nearly all bytes - check for timeout')
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=write,0,1500', expect='.*CONNECT.*'))
        #test.dut.dstl_write_file(0, test.write_maxlength, "", expect_response='.*CONNECT.*')
        #data = random.sample(test.random_character_set, 1499)
        #test.dut.at1.send(data)
        test.expect(test.dut.at1.send('!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!'))
        test.expect(test.dut.at1.wait_for('.*\^SFSA: 214.*ERROR.*|.*ERROR: 21.*'))
        test.log.info('4.4.4 sending with pausing between bytes - check for timeout')
        test.expect(test.dut.dstl_write_file(0, test.write_maxlength, "", expect_response='.*CONNECT.*'))
        for i in range(1,49):
            #data = random.sample(test.random_character_set, 50)
            #test.dut.at1.send(data)
            test.dut.at1.send('!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!')
            test.sleep(2)
        #data = random.sample(test.random_character_set, 50)
        #test.dut.at1.send(data)
        test.expect(test.dut.at1.send('!@#$%^&*()_+12345678901qaz2wsx3edc4rfv5tgb6yhn7ujm8ik<>QAWSEDRFTGYHUJIKOLP[]|!'))
        test.expect(test.dut.at1.wait_for('.*\^SFSA: 214.*ERROR.*|.*ERROR: 21.*'))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'timeouttest.txt'))
        test.expect(test.dut.dstl_close_file(0))
        test.log.info('4.5.0 Attempt to read the File with Read_only - Mode (0)')
        test.expect(test.dut.dstl_open_file(test.rootpath + 'Read45.txt', 10, expect_response=test.normal_result))
        test.expect(test.dut.dstl_write_file(0, 33, test.read_text, expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_read_file(0,33))
        test.expect(test.dut.dstl_file_seek(0,0,expect_response='.*\^SFSA: 0,0.*OK.*'))
        test.expect(test.dut.dstl_file_seek(0, 0, 0,expect_response='.*\^SFSA: 0,0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,33',expect='.*\^SFSA: 33,0.*Step 4.5 Read a File: Hello World.*OK.*'))
        test.expect(test.dut.dstl_read_file(0, 33))
        test.expect(test.dut.dstl_file_seek(0, 0, expect_response='.*\^SFSA: 0,0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,33', expect='.*\^SFSA: 33,0.*Step 4.5 Read a File: Hello World.*OK.*'))
        test.expect(test.dut.dstl_file_seek(0, 0, expect_response='.*\^SFSA: 0,0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,1500', expect='.*\^SFSA: 33,0.*Step 4.5 Read a File: Hello World.*OK.*'))
        test.expect(test.dut.dstl_file_seek(0, 0, expect_response='.*\^SFSA: 0,0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,1501', expect='.*\^SFSA: 204.*\+CME ERROR: .*|.*\+CME ERROR: 21.*'))
        test.expect(test.dut.dstl_file_seek(0, 0, expect_response='.*\^SFSA: 0,0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,0', expect='.*\^SFSA: 204.*\+CME ERROR: .*|.*\+CME ERROR: 21.*'))
        test.expect(test.dut.dstl_file_seek(0, 0, expect_response='.*\^SFSA: 0,0.*OK.*'))
        for i in test.read_flag:
            temp_read=test.dut.dstl_read_file(0, i)
            '''test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,1', expect='.*\^SFSA: 1,0.*S.*OK.*'))
            test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,2', expect='.*\^SFSA: 2,0.*te.*OK.*'))
            test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,3', expect='.*\^SFSA: 3,0.*p 4.*OK.*'))
            test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,15', expect='.*\^SFSA: 15,0.*.5 Read a File:.*OK.*'))
            test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,20', expect='.*\^SFSA: 12,0.* Hello World.*OK.*'))
            test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,1500', expect='.*\^SFSA: 0,0.*OK.*'))'''
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,1500', expect='.*\^SFSA: 9.*\+CME ERROR: 100.*'))
        test.dut.dstl_open_file(test.rootpath + 'Read45.txt', 2, expect_response=test.normal_result)
        test.expect(test.dut.at1.send_and_verify('at^SFSA=read,0,100',expect='.*\^SFSA: 33,0.*Step 4.5 Read a File: Hello World.*OK.*'))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'Read45_empty_File.txt', 10, expect_response=test.normal_result))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'Read45.txt', 0, expect_response=test.normal_result))
        test.expect(test.dut.dstl_read_file(-1, 100))
        test.expect(test.dut.dstl_close_file(-1))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'Read45_empty_File.txt', 0, expect_response=test.normal_result))
        test.expect(test.dut.dstl_read_file(0, 100))
        test.expect(test.dut.dstl_close_file(0))
        for i in test.open_flag:
            if i == 1:
                test.log.info('4.5.1 Attempt to read the File in Write_only - Mode (1)')
            if i == 2:
                test.log.info('4.5.2 Attempt to read the File with Read_Write - Mode (2)')
            if i == 3:
                test.log.info('4.5.3 Attempt to read the File in Write_only + Read_write - Mode (3)')
            if i == 4:
                test.log.info('4.5.4 Attempt to read the File in Append + Read_only - Mode (4)')
            if i == 5:
                test.log.info('4.5.5 Attempt to read the File in Append + Write_only - Mode (5)')
            if i == 6:
                test.log.info('4.5.6 Attempt to read the File in Append + Read_Write - Mode (6)')
            if i == 7:
                test.log.info('4.5.7 Attempt to read the File in Append + Read_Write + Write_only - Mode (7)')
            if i == 8:
                test.log.info('4.5.8 Attempt to read the File in Create - Mode (8)')
            if i == 9:
                test.log.info('4.5.9 Attempt to read the File in Create + Write_only - Mode (9)')
            if i == 10:
                test.log.info('4.5.10 Attempt to read the File in Create + Read_write - Mode (10)')
            if i == 11:
                test.log.info('4.5.11 Attempt to read the File in Create + Read_write + Write_only - Mode (11)')
            if i == 12:
                test.log.info('4.5.12 Attempt to read the File in Create + Append - Mode (12)')
            if i == 13:
                test.log.info('4.5.13 Attempt to read the File in Create + Append + Write_only - Mode (13)')
            if i == 14:
                test.log.info('4.5.14 Attempt to read the File in Create + Append + Read-write - Mode (14)')
            if i == 15:
                test.log.info('4.5.15 Attempt to read the File in Create + Append + Read-write + Write_only - Mode (15)')
            for temp_file in test.write_read_file_list:
                test.expect(test.dut.dstl_open_file(test.rootpath + temp_file, i, expect_response=test.normal_result))
                test.expect(test.dut.dstl_read_file(0, 100))
                test.expect(test.dut.dstl_close_file(0))
        test.log.info('4.5.16 Attempt to read the File in Truncate + Read_only - Mode (16)')
        test.expect(test.dut.dstl_open_file(test.rootpath + test.write_read_file_list[0], 16, expect_response=test.normal_result))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_open_file(test.rootpath + test.write_read_file_list[1], 16, expect_response=test.normal_result))
        test.expect(test.dut.dstl_close_file(0))
        for i in test.open_flag_new:
            if i == 17:
                test.expect(test.dut.dstl_read_status(test.rootpath + test.write_read_file_list[0]))
                test.expect(test.dut.dstl_close_file(0))
                test.expect(test.dut.dstl_open_file(test.rootpath + test.write_read_file_list[0], i,expect_response=test.normal_result))
                test.expect(test.dut.dstl_read_status(test.rootpath + test.write_read_file_list[0]))
                test.expect(test.dut.dstl_read_file(0, 100))
                test.expect(test.dut.dstl_close_file(0))
                test.expect(test.dut.dstl_open_file(test.rootpath + test.write_read_file_list[1], i,expect_response=test.normal_result))
                test.expect(test.dut.dstl_read_file(0, 100))
                test.expect(test.dut.dstl_close_file(0))
            else:
                test.expect(test.dut.dstl_open_file(test.rootpath + test.write_read_file_list[0], 10,expect_response=test.normal_result))
                #data = random.sample(test.random_character_set, 36)
                test.expect(test.dut.dstl_write_file(0, 36, test.write_data, expect_response='.*\^SFSA: 0.*OK'))
                test.expect(test.dut.dstl_close_file(0))
                test.expect(test.dut.dstl_read_status(test.rootpath + test.write_read_file_list[0]))
                test.expect(test.dut.dstl_open_file(test.rootpath + test.write_read_file_list[0], i,expect_response=test.normal_result))
                test.expect(test.dut.dstl_read_status(test.rootpath + test.write_read_file_list[0]))
                test.expect(test.dut.dstl_read_file(0, 100))
                test.expect(test.dut.dstl_close_file(0))
                test.expect(test.dut.dstl_open_file(test.rootpath + test.write_read_file_list[1], i,expect_response=test.normal_result))
                test.expect(test.dut.dstl_read_file(0, 100))
                test.expect(test.dut.dstl_close_file(0))
        test.log.info('4.5.20 Attempt to open a File in Mode >= Truncate + Append + Read_only - Mode (>=20)')
        for i in test.open_close_flag:
            test.log.info('for loop with i='+i+' as open flag')
            for temp_file in test.write_read_file_list:
                test.expect(test.dut.dstl_open_file(test.rootpath + temp_file, i, expect_response=test.normal_result))
                test.expect(test.dut.dstl_close_file(0))
        test.log.info('4.6 Append to a File')
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'Append46.bin'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'Append46.bin', 9, expect_response=test.normal_result))
        test.expect(test.dut.dstl_write_file(0, 35, test.write_data, expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'Append46.bin', 6, expect_response=test.normal_result))
        test.expect(test.dut.dstl_write_file(0, 16, test.write_data, expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_file_seek(0,0))
        test.expect(test.dut.dstl_read_file(0, 99))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'Append46.bin'))
        test.expect(test.dut.at1.send_and_verify('at+ipr?', expect='.*OK.*'))
        test.expect(test.dut.dstl_restart())
        temp_dir = test.rootpath
        for i in range(0, 45):
            test.expect(test.dut.at1.send_and_verify('ati', expect='.*ERROR.*|.*OK.*'))
            test.expect(test.dut.dstl_list_directory(temp_dir))
            temp_dir = temp_dir + str(i) + '/'
            test.expect(test.dut.dstl_remove_file(temp_dir, expect_response='.*ERROR.*|.*OK.*'))
            test.expect(test.dut.dstl_remove_directory(temp_dir, expect_response='.*ERROR.*|.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('ati', expect='.*ERROR.*|.*OK.*'))
        for i in range(0, 45):
            if i > 35:
                ls_dir = temp_dir[:-2]
                test.expect(test.dut.dstl_list_directory(temp_dir))
                test.expect(test.dut.dstl_list_directory(ls_dir))
                test.expect(test.dut.dstl_remove_directory(temp_dir, expect_response='.*ERROR.*|.*OK.*'))
                temp_dir = temp_dir[:-2]
            else:
                ls_dir = temp_dir[:-3]
                test.expect(test.dut.dstl_list_directory(temp_dir))
                test.expect(test.dut.dstl_list_directory(ls_dir))
                test.expect(test.dut.dstl_remove_directory(temp_dir, expect_response='.*ERROR.*|.*OK.*'))
                temp_dir = temp_dir[:-3]
        test.expect(test.dut.dstl_remove_file(test.rootpath + 'TestWriteFile41.bin', expect_response='.*ERROR.*|.*OK.*'))
        test.expect(test.dut.dstl_remove_file(test.rootpath + 'FullWriteFile42.bin', expect_response='.*ERROR.*|.*OK.*'))
        test.expect(test.dut.dstl_remove_file(test.rootpath + 'TruncateFile43.bin', expect_response='.*ERROR.*|.*OK.*'))
        test.expect(test.dut.dstl_remove_file(test.rootpath + 'timeouttest.txt', expect_response='.*ERROR.*|.*OK.*'))
        test.expect(test.dut.dstl_remove_file(test.rootpath + 'Append46.bin', expect_response='.*ERROR.*|.*OK.*'))
        test.log.info('5.1 create a empty file and seek (Flags: create|readwrite)')
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestSeekEmpty.bin', 10, expect_response=test.normal_result))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TestSeekEmpty.bin'))
        test.expect(test.dut.dstl_file_seek(0, 0))
        test.expect(test.dut.dstl_list_directory(temp_dir))
        test.log.info('fill file with userdata (16 chars)')
        test.dut.dstl_write_file(0, 16, 'aBcDeFgHiJkLmNoP', expect_response='.*\^SFSA: 0.*OK')
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestSeekEmpty.bin', expect='.*\^SFSA: 16.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_file_seek(0, 0))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=read,0,99', expect='.*\^SFSA: 16,0.*aBcDeFgHiJkLmNoP.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestSeekEmpty.bin', expect='.*\^SFSA: 16.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.log.info('5.2 check parameters for seek')
        test.expect(test.dut.dstl_file_seek(0, 0))
        test.expect(test.dut.dstl_file_seek(0, 0, 0))
        test.expect(test.dut.dstl_file_seek(0, 0, 1))
        test.expect(test.dut.dstl_file_seek(0, 0, 2))
        test.expect(test.dut.dstl_file_seek(0, 1))
        test.expect(test.dut.dstl_file_seek(0, 2, 0))
        test.expect(test.dut.dstl_file_seek(0, 3, 1))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=read,0,99', expect='.*\^SFSA: 11,0.*FgHiJkLmNoP.*OK'))
        test.expect(test.dut.dstl_file_seek(0, 4, 2))
        test.expect(test.dut.dstl_read_file(0, 99))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestSeekEmpty.bin', expect='.*\^SFSA: 16.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.log.info('5.3 check parameter offset for seek')
        for i in range(0, 2):
            if i == 0:
                test.expect(test.dut.dstl_file_seek(0, 4))
                test.expect(test.dut.dstl_file_seek(0, 15))
                test.expect(test.dut.dstl_file_seek(0, 16))
                test.expect(test.dut.dstl_file_seek(0, 17))
                test.expect(test.dut.dstl_read_file(0, 99))
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestSeekEmpty.bin',expect='.*\^SFSA: 16.*\^SFSA: 0.*\^SFSA: 0.*OK'))
                test.expect(test.dut.dstl_file_seek(0, -1))
            if i == 1:
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestSeekEmpty.bin',expect='.*\^SFSA: 16.*\^SFSA: 0.*\^SFSA: 0.*OK'))
                test.expect(test.dut.dstl_file_seek(0, 5))
                test.expect(test.dut.dstl_file_seek(0, 5, 1))
                test.expect(test.dut.dstl_file_seek(0, 5, 1))
                test.expect(test.dut.dstl_file_seek(0, 1, 1))
                test.expect(test.dut.dstl_file_seek(0, 1, 1))
                test.expect(test.dut.dstl_file_seek(0, -1, 1))
            if i == 2:
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestSeekEmpty.bin',expect='.*\^SFSA: 16.*\^SFSA: 0.*\^SFSA: 0.*OK'))
                test.expect(test.dut.dstl_file_seek(0, -5, 2))
                test.expect(test.dut.dstl_file_seek(0, -10, 2))
                test.expect(test.dut.dstl_file_seek(0, -15, 2))
                test.expect(test.dut.dstl_file_seek(0, -16, 2))
                test.expect(test.dut.dstl_file_seek(0, 5, 2))
                test.expect(test.dut.dstl_file_seek(0, 10, 2))
                test.expect(test.dut.dstl_file_seek(0, 15, 2))
                test.expect(test.dut.dstl_file_seek(0, 16, 2))
                test.expect(test.dut.dstl_file_seek(0, -1, 2))
            for temp_seek in test.seek_flag:
                if i == 0:
                    test.expect(test.dut.dstl_file_seek(0, temp_seek))
                else:
                    test.expect(test.dut.dstl_file_seek(0, temp_seek, i))
        test.log.info('5.4 write into file and seek')
        test.expect(test.dut.dstl_file_seek(0, 13, 0))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestSeekEmpty.bin', expect='.*\^SFSA: 16.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_file_seek(0, 1, 1))
        test.expect(test.dut.dstl_file_seek(0, 1, 2))
        test.expect(test.dut.dstl_write_file(0, 1, '#', expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TestSeekEmpty.bin'))
        test.expect(test.dut.dstl_file_seek(0, 1, 1))
        test.expect(test.dut.dstl_file_seek(0, 0))
        test.expect(test.dut.dstl_file_seek(0, 0, 0))
        test.expect(test.dut.dstl_file_seek(0, 0, 1))
        test.expect(test.dut.dstl_file_seek(0, 0, 2))
        test.expect(test.dut.dstl_file_seek(0, 1))
        test.expect(test.dut.dstl_file_seek(0, 2, 0))
        test.expect(test.dut.dstl_file_seek(0, 3, 1))
        test.expect(test.dut.dstl_file_seek(0, 4, 2))
        test.log.info('5.5 write pattern into file and seek')
        test.expect(test.dut.dstl_file_seek(0, 0))
        test.expect(test.dut.dstl_read_file(0, 99))
        test.expect(test.dut.dstl_file_seek(0, 1))
        test.expect(test.dut.dstl_write_file(0, 5, 'BCDEF', expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_file_seek(0, 0))
        test.expect(test.dut.dstl_read_file(0, 99))
        test.expect(test.dut.dstl_file_seek(0, 0))
        test.expect(test.dut.dstl_read_file(0, 1) == 'a')
        test.expect(test.dut.dstl_file_seek(0, 0, 0))
        test.expect(test.dut.dstl_read_file(0, 1) == 'a')
        test.expect(test.dut.dstl_file_seek(0, 1))
        test.expect(test.dut.dstl_read_file(0, 1) == 'B')
        test.expect(test.dut.dstl_file_seek(0, 1, 0))
        test.expect(test.dut.dstl_read_file(0, 1) == 'B')
        test.expect(test.dut.dstl_file_seek(0, 1, 1))
        test.expect(test.dut.dstl_read_file(0, 1) == 'D')
        test.expect(test.dut.dstl_file_seek(0, 2))
        test.expect(test.dut.dstl_read_file(0, 1) == 'C')
        test.expect(test.dut.dstl_file_seek(0, 2, 1))
        test.expect(test.dut.dstl_read_file(0, 1) == 'F')
        test.expect(test.dut.dstl_file_seek(0, -2, 2))
        test.expect(test.dut.dstl_read_file(0, 1))
        test.expect(test.dut.dstl_file_seek(0, 0, 2))
        test.expect(test.dut.dstl_read_file(0, 1))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TestSeekEmpty.bin'))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestSeekEmpty.bin', 0, expect_response=test.normal_result))
        test.expect(test.dut.dstl_read_file(0, 0))
        test.expect(test.dut.dstl_read_file(0, 1))
        test.expect(test.dut.dstl_read_file(0, 2))
        test.expect(test.dut.dstl_read_file(0, 3))
        test.expect(test.dut.dstl_read_file(0, 4))
        test.expect(test.dut.dstl_close_file(0))
        test.log.info('CRC of a file')
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestSeekEmpty.bin', 8, expect_response=test.normal_result))
        test.expect(test.dut.dstl_read_file(0, 99))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestSeekEmpty.bin', 10, expect_response=test.normal_result))
        test.expect(test.dut.dstl_write_file(0, 17, 'aBcDeFgHiJkLmNoP#', expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TestSeekEmpty.bin'))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestSeekEmpty.bin', 8, expect_response=test.normal_result))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'TestSeekEmpty.bin'))
        test.expect(test.dut.dstl_get_crc(test.rootpath))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'TestSeekEmpty.bin', 2))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestSeekEmpty.bin', 0, expect_response=test.normal_result))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'TestSeekEmpty.bin'))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'TestSeekEmpty.bin'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'CrcDemoFile.txt', 9, expect_response=test.normal_result))
        test.expect(test.dut.dstl_write_file(0, 9, '123456789', expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'CrcDemoFile.txt', 0, expect_response=test.normal_result))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'CrcDemoFile.txt'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestCrc1Empty.bin', 9, expect_response=test.normal_result))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestCrc2Empty.bin', 10, expect_response=test.normal_result))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'TestCrc1Empty.bin'))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'TestCrc2Empty.bin'))
        test.expect(test.dut.dstl_write_file(0, 1, 'a', expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_write_file(1, 1, 'b', expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/TestCrc1Empty.bin', expect='.*\^SFSA: 33527,0.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/TestCrc2Empty.bin', expect='.*\^SFSA: 45164,0.*OK'))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_close_file(1))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestCrc1Empty.bin', 0, expect_response=test.normal_result))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'TestCrc1Empty.bin'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestCrc2Empty.bin', 0, expect_response=test.normal_result))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'TestCrc2Empty.bin'))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'Test-Crc-of-15000-Bytes.bin', 10, expect_response=test.normal_result))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'Test-Crc-of-15000-Bytes.bin'))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'Test-Crc-of-15000-Bytes.bin'))
        test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'Test-Crc-of-15000-Bytes.bin', 6, expect_response=test.normal_result))
        test.expect(test.dut.dstl_write_file(0, 1500, test.write_data, expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'Test-Crc-of-15000-Bytes.bin'))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'Test-Crc-of-15000-Bytes.bin'))
        test.expect(test.dut.dstl_close_file(0))
        for i in range(0, 8):
            test.expect(test.dut.dstl_open_file(test.rootpath + 'Test-Crc-of-15000-Bytes.bin', 0, expect_response=test.normal_result))
            test.expect(test.dut.dstl_open_file(test.rootpath + 'Test-Crc-of-15000-Bytes.bin', 6, expect_response=test.normal_result))
            test.expect(test.dut.dstl_write_file(0, 1500, test.write_data, expect_response='.*\^SFSA: 0.*OK'))
            test.expect(test.dut.dstl_read_status(test.rootpath + 'Test-Crc-of-15000-Bytes.bin'))
            if i == 0:
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 55094,0.*OK'))
            if i == 1:
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 21040,0.*OK'))
            if i == 2:
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 14331,0.*OK'))
            if i == 3:
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 17364,0.*OK'))
            if i == 4:
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 3874,0.*OK'))
            if i == 5:
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 25804,0.*OK'))
            if i == 6:
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 50438,0.*OK'))
            if i == 7:
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 34928,0.*OK'))
            if i == 8:
                test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 56974,0.*OK'))
            test.expect(test.dut.dstl_close_file(0))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'Test-Crc-of-15000-Bytes.bin', 0, expect_response=test.normal_result))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 15000.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 56974,0.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=crc,A:/Test-Crc-of-15000-Bytes.bin', expect='.*\^SFSA: 56974,0.*OK'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa=ls,A:/', expect='.*\^SFSA: "TestSeekEmpty.bin".*OK.*'))
        test.log.info('COPY')
        test.expect(test.dut.dstl_create_directory(test.rootpath + 'copydir', expect_response='.*\^SFSA: .*OK.*'))
        test.expect(test.dut.dstl_create_directory(test.rootpath + 'dircopy', expect_response='.*\^SFSA: .*OK.*'))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_list_directory(test.rootpath + 'dircopy'))
        test.expect(test.dut.dstl_copy_file('A:/copydir', 'A:/dircopy'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TestCrc1Empty.bin', 9, expect_response=test.normal_result))
        test.expect(test.dut.dstl_copy_file('A:/TestCrc1Empty.bin', 'A:/dircopy'))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_list_directory(test.rootpath + 'dircopy'))
        test.expect(test.dut.dstl_open_file(test.rootpath + 'TTestDestination.bin', 9, expect_response=test.normal_result))
        test.expect(test.dut.dstl_write_file(0, 48, 'this is the destination file TestDestination.bin', expect_response='.*\^SFSA: 0.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestDestination.bin', expect='.*\^SFSA: 48.*\^SFSA: 0.*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestCrc1Empty.bin', expect='.*\^SFSA: 1.*\^SFSA: 0.*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.dstl_copy_file('A:/TestDestination.bin', 'A:/TestDestination73.bin'))
        test.expect(test.dut.dstl_copy_file('A:/TestCrc1Empty.bin', 'A:/TestDestination.bin'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestDestination.bin', expect='.*\^SFSA: 48.*\^SFSA: 0.*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.dstl_close_file(1))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_copy_file('A:/TestCrc1Empty.bin', 'A:/TestDestination.bin'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestDestination.bin', expect='.*\^SFSA: 48.*\^SFSA: 0.*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=ls,A:/', expect='.*\^SFSA: "TestDestination.bin".*OK.*'))
        test.expect(test.dut.dstl_list_directory(test.rootpath + 'dircopy'))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TestCrc1Empty.bin'))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TestDestination73.bin'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestSeekEmpty.bin', expect='.*\^SFSA: 17.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_list_directory(test.rootpath + 'dircopy'))
        test.expect(test.dut.dstl_copy_file('A:/TestSeekEmpty.bin', 'A:/dircopy/CopyOfFile.bin'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/TestSeekEmpty.bin', expect='.*\^SFSA: 17.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=stat,A:/dircopy/CopyOfFile.bin', expect='.*\^SFSA: 17.*\^SFSA: 0.*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'TestSeekEmpty.bin'))
        test.expect(test.dut.dstl_get_crc(test.rootpath + 'dircopy/CopyOfFile.bin'))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TestSeekEmpty.bin'))
        test.expect(test.dut.dstl_copy_file('A:/TestSeekEmpty.bin', 'A:/TestSeekEmpty.bin'))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.dstl_read_status(test.rootpath + 'TestSeekEmpty.bin'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=ls,A:/dircopy', expect='.*\^SFSA: "CopyOfFile.bin".*\^SFSA: 0.*OK'))
        test.expect(test.dut.dstl_copy_file('A:/dircopy/CopyOfFile.bin', 'A:/'))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=copy,A:/dircopy/CopyOfFile.bin,/', expect='.*\^SFSA: 101.*ERROR: .*'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=copy,A:/dircopy/CopyOfFile.bin,""', expect='.*\^SFSA: 201.*ERROR: 21.*|.*\^SFSA: 101.*ERROR: .*'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=copy,A:/dircopy/CopyOfFile.bin," "', expect='.*\^SFSA: 100.*ERROR: 100.*|.*\^SFSA: 101.*ERROR: .*'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=copy,A:/dircopy/CopyOfFile.bin,"/"', expect='.*\^SFSA: 100.*ERROR: 100.*|.*\+CME ERROR: 25.*'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=copy,A:/dircopy/CopyOfFile.bin,"/abc/"', expect='.*\^SFSA: 100.*ERROR: 100.*|.*\+CME ERROR: 25.*'))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=ls,A:/dircopy', expect='.*\^SFSA: "CopyOfFile.bin".*\^SFSA: 0.*OK'))
        test.log.info('8.1 AT cmd in UCS2')
        test.expect(test.dut.at1.send_and_verify('ATi', expect='.*OK'))
        test.expect(test.dut.at1.send_and_verify('ati', expect='.*OK.*'))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        for temp_stat in test.stata_file_list:
            test.expect(test.dut.dstl_read_status(test.rootpath + temp_stat))
        test.expect(test.dut.dstl_list_directory(test.rootpath))
        test.expect(test.dut.at1.send_and_verify('AT+cscs="UCS2"', expect='.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA="004C0053","0041003A002F"', expect='.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=?', expect='.*OK'))
        test.expect(test.dut.at1.send_and_verify('AT^SFSA=?', expect='.*OK'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa="004F00500045004E","0041003A002F004100420043",9', expect='.*\^SFSA: .*,0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa="0043004C004F00530045",0', expect='.*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa="0043004C004F00530045",1', expect='.*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa="0043004C004F00530045",2', expect='.*\^SFSA: .*O.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa="0043004C004F00530045",3', expect='.*\^SFSA: .*O.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa="004C0053","0041003A002F"', expect='.*\^SFSA: .*004100420043.*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('at^sfsa="0053005400410054","0041003A002F004100420043"', expect='.*\^SFSA: 0.*\^SFSA: 0.*\^SFSA: 0.*OK.*'))
        test.expect(test.dut.at1.send_and_verify('AT+cscs="GSM"', expect='.*OK'))
    def cleanup(test):
        test.log.info('Create root dir for FFS')
        test.expect(test.dut.dstl_create_directory(test.rootpath, expect_response='.*\^SFSA: .*OK.*'))
        test.log.info('***Test End***')
if '__main__' == __name__:
    unicorn.main()
